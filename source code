#include <reg52.h>
#define uchar unsigned char
#define uint unsigned int

sbit plus=P3^4;
sbit sub=P3^5;
sbit mul=P3^6;
sbit div=P3^7;

sbit wela=P2^7;
sbit dula=P2^6;

uchar code table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x73,0x38,0x3e,0x6d,0x7f,0x39,0x76,0x79,0x37,0x6f,0x77,0x00};
uchar num;
int r_sign=0;
int sign[4];
//count1=0,count2=0,equal=0;
long a[4],b[4];

void delayms(int xms)
{
int i,j;
for(i=xms;i>0;i--)
   for(j=110;j>0;j--);
}

void MatrixKeyScan()
{
uchar temp,key;
P3=0xfe;
temp=P3;
temp=temp&0xf0;
    if(temp!=0xf0)
    {
	delayms(10);                   //?ü?ì?o3?
    temp=P3;
    temp=temp&0xf0;
        if(temp!=0xf0)
		  {   
              temp=P3;
		      switch(temp)
		      	{
		         case 0xee:
		              key=1;
				        break;
		         case 0xde:
		              key=2;
				        break;
		         case 0xbe:
		              key=3;
				        break;
				 case 0x7e:
				      sign[0]=1;
					  break;

				 }
                 
				if(sign[0]==0)
					{
					a[sign[1]]=key;
                	sign[1]++;
					}

				if(sign[0]!=0)
					{
					
					b[sign[2]]=key;
					sign[2]++;
					}
			
             
			
				while(temp!=0xf0)
					{
					temp=P3;
					temp=temp&0xf0;
					}
		  }

     
    }

P3=0xfd;
temp=P3;
temp=temp&0xf0;
    if(temp!=0xf0)
    {
	delayms(10);                   //?ü?ì?o3?
    temp=P3;
    temp=temp&0xf0;
        if(temp!=0xf0)
		  {
		      temp=P3;
		      switch(temp)
		      {
		        case 0xed:
		              key=4;
				        break;
		        case 0xdd:
		              key=5;
				        break;
		        case 0xbd:
		              key=6;
				        break;
				case 0x7d:
		              sign[0]=2;
				        break;
		      }

            if(sign[0]==0)
			    {
		        a[sign[1]]=key;
				sign[1]++;
				}
		

             if(sign[0]!=0)
			   {
			   
			   b[sign[2]]=key;
               sign[2]++;
			   }

				while(temp!=0xf0)
				{
				temp=P3;
				temp=temp&0xf0;
				}
		  }

     
    }

P3=0xfb;
temp=P3;
temp=temp&0xf0;
    if(temp!=0xf0)
    {
	 delayms(10);                   //?ü?ì?o3?
    temp=P3;
    temp=temp&0xf0;
        if(temp!=0xf0)
		  {
		     
		      temp=P3;
		      switch(temp)
		      {
		        case 0xeb:
		              key=7;
				        break;
		        case 0xdb:
		              key=8;
				        break;
		        case 0xbb:
		              key=9;
				        break;
				case 0x7b:
		              sign[0]=3;
				        break;
		      }

				if(sign[0]==0)
				{
				a[sign[1]]=key;
				sign[1]++;
				}
			

				if(sign[0]!=0)
				{
				
				b[sign[2]]=key;
				sign[2]++;
				}

             

				while(temp!=0xf0)
				{
				temp=P3;
				temp=temp&0xf0;
				}
		  }
	  }

P3=0xf7;
temp=P3;
temp=temp&0xf0;
    if(temp!=0xf0)
    {
	 delayms(10);                   //?ü?ì?o3?
    temp=P3;
    temp=temp&0xf0;
        if(temp!=0xf0)
		  {
		   
		     temp=P3;
		  
    		 switch(temp)
		      {
		        case 0xd7:
		              key=0;
				        break;
		        case 0xb7:
		              sign[3]=1;
				        break;
				case 0x77:
		              sign[0]=4;
				        break;
		      }

			  	if(sign[0]==0&&temp==0xd7&&sign[1]!=0)
				{
				a[sign[1]]=key;
				sign[1]++;
				}
				
				else if(sign[0]!=0&&temp==0xd7&&sign[2]!=0)
				{
				
				b[sign[2]]=key;
				sign[2]++;
				}



		  while(temp!=0xf0)
				{
				temp=P3;
				temp=temp&0xf0;
				}
		  }

     
    }
}


long Calculator()
{

long res,cal1,cal2;

if(sign[1]==1)
cal1=a[0];
else if(sign[1]==2)
cal1=a[0]*10+a[1];
else if(sign[1]==3)
cal1=a[0]*100+a[1]*10+a[2];

if(sign[2]==1)
cal2=b[0];
else if(sign[2]==2)
cal2=b[0]*10+b[1];
else if(sign[2]==3)
cal2=b[0]*100+b[1]*10+b[2];



if(sign[0]==1)
res=cal1+cal2;

if(sign[0]==2)
res=cal1-cal2;

if(sign[0]==3)
res=cal1*cal2;

if(sign[0]==4)
res=cal1/cal2;

return res;

}

void Display(int v1,int v2,int v3,int v4,int v5,int v6)
{
      P0=0x00;      

      dula=1;
	  P0=table[v1];
	  dula=0;
	  P0=0xff;
	  wela=1;
	  P0=0xfe;
	  wela=0;
      delayms(1);

	  P0=0x00;

	  dula=1;
	  P0=table[v2];
	  dula=0;
	  P0=0xff;
	  wela=1;
	  P0=0xfd;
	  wela=0;
      delayms(1);


	  P0=0x00;

	  dula=1;
	  P0=table[v3];
	  dula=0;
	  P0=0xff;
	  wela=1;
	  P0=0xfb;
	  wela=0;
      delayms(1);

	  P0=0x00;

	  dula=1;
	  P0=table[v4];
	  dula=0;
	  P0=0xff;
	  wela=1;
	  P0=0xf7;
	  wela=0;
      delayms(1);

	  P0=0x00;

	  dula=1;
	  P0=table[v5];
	  dula=0;
	  P0=0xff;
	  wela=1;
	  P0=0xef;
	  wela=0;
      delayms(1);

	  P0=0x00;

	  dula=1;
	  P0=table[v6];
	  dula=0;
	  P0=0xff;
	  wela=1;
	  P0=0xdf;
	  wela=0;
      delayms(1);
	  
	  P0=0x00;
}

void CharDisplay()
{ 
   int i;

if(sign[0]==1)
{
     for(i=0;i<100;i++)
	   Display(21,21,10,11,12,13);
}

if(sign[0]==2)
{
     for(i=0;i<100;i++)
	   Display(21,21,21,13,12,14);
}

if(sign[0]==3)
{
     for(i=0;i<100;i++)
	   Display (21,15,16,17,18,19);
}

if(sign[0]==4)
{
     for(i=0;i<100;i++)
	   Display (21,21,21,15,16,12);
}

	  for(i=0;i<100;i++)
	    Display(21,21,21,21,21,21);
}

void T0_time() interrupt 1
{
	TH0=(65536-45872)/256;
	TL0=(65536-45872)%256;
	num++;
	if(num==15)
	{
		 
		 num=0;
	 	 wela=1;
  		 P0=0xdf;
  	 	 wela=0;

		 if(r_sign==0)
		 {
 	  	 dula=1;
 		 P0=0x08;       
 		 dula=0;
		 r_sign=1;
		 }
		 else if(r_sign==1)
		 {
		 dula=1;
 		 P0=0x00;                 
		 dula=0;
		 r_sign=0;
		 }
	}
}


void main()
{  long res,c[6];
	//计时器初始化：?
	TMOD=0x01;
	TH0=(65536-45872)/256;
	TL0=(65536-45872)%256;
	EA=1;
	ET0=1;

   while(1)
   {
   int k,z;
   for(k=0;k<=3;k++)
   		sign[k]=0;
  
	for(k=0;k<3;k++)
	 a[k]=0;
	
 
   while(sign[0]==0)
    {
      MatrixKeyScan();
      if(sign[1]==1)
	  Display(21,21,21,21,21,a[0]);

	  else if(sign[1]==2)
      Display(21,21,21,21,a[0],a[1]);
	  else if(sign[1]==3)
	  Display(21,21,21,a[0],a[1],a[2]);
	  else if(sign[1]>=4)
	  {
        for(k=0;k<250;k++)
     		Display(21,17,20,20,0,20);
		for(k=0;k<3;k++)
     		Display(21,21,21,21,21,21);

		sign[1] = 0;
		for(k=0;k<3;k++)
	       a[k]=0;
	  }

	  if(sign[1]==0)
		TR0=1;
	  else
	  	TR0=0;
		
    }


	CharDisplay();

	for(k=0;k<3;k++)
	 b[k]=0;
 	sign[2]=0;
 	

    while(sign[3]==0)
	 {
      MatrixKeyScan();

      if(sign[2]==1)
	  Display(21,21,21,21,21,b[0]);
	  else if(sign[2]==2)
      Display(21,21,21,21,b[0],b[1]);
	  else if(sign[2]==3)
	  Display(21,21,21,b[0],b[1],b[2]);

	  else if(sign[2]>=4)
	  {
	  for(k=0;k<250;k++)
     		Display(21,17,20,20,0,20);
		sign[2]=0;
		for(k=0;k<3;k++)
	       b[k]=0;
	  }

	  if(sign[2]==0)
		TR0=1;
	  else
	  	TR0=0;

	 }
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 
    res=Calculator();

	c[0]=res/100000;
	c[1]=(res-c[0]*100000)/10000;
	c[2]=(res-c[0]*100000-c[1]*10000)/1000;
	c[3]=(res-c[0]*100000-c[1]*10000-c[2]*1000)/100;
	c[4]=(res-c[0]*100000-c[1]*10000-c[2]*1000-c[3]*100)/10;
	c[5]=res-c[0]*100000-c[1]*10000-c[2]*1000-c[3]*100-c[4]*10;   


    for(k=0;k<6;k++)
	{
	if(c[k]!=0)
	break;
	}
	
	for(z=0;z<k;z++)
	c[z]=21;

  for(k=0;k<600;k++)
	Display(c[0],c[1],c[2],c[3],c[4],c[5]);
  for(k=0;k<3;k++)
	Display(21,21,21,21,21,21);
   }
}
